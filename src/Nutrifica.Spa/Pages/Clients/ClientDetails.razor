@page "/clients/{ClientId:guid}"
@using Nutrifica.Api.Contracts.Clients
@using Nutrifica.Spa.Infrastructure.Routes
@using Nutrifica.Spa.Infrastructure.Services.Clients
@using Nutrifica.Spa.Shared.Clients

@inject IClientService ClientService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@implements IDisposable

<h3>ClientDetails</h3>
<MudGrid>
    <MudItem md="3" xs="12">
        @if (_client is not null)
        {
            <AboutClientComponent Client="_client"/>
        }
    </MudItem>

    <MudItem md="9" xs="12">
        <MudTabs Elevation="2"
                 Rounded="true"
                 ApplyEffectsToContainer="true"
                 PanelClass="pa-3">
            <MudTabPanel Text="Звонки">

                @if (_client is not null)
                {
                    <ClientPhoneCallsComponent ClientId="ClientId"/>
                }

            </MudTabPanel>

            <MudTabPanel Text="Заказы">

                <ClientOrders/>

            </MudTabPanel>
        </MudTabs>


    </MudItem>

</MudGrid>

@code {
    [Parameter] public Guid ClientId { get; set; }

    private ClientResponse _client = null!;
    private readonly CancellationTokenSource _cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchClientInfoAsync(ClientId);
    }

    private async Task FetchClientInfoAsync(Guid clientId)
    {
        var result = await ClientService.GetByIdAsync(clientId, _cancellationTokenSource.Token);
        if (result.IsSuccess)
        {
            _client = result.Value;
        }
        else
        {
            Snackbar.Add(result.Error.Description, Severity.Error, opt => opt.CloseAfterNavigation = false);
            NavigationManager.NavigateTo(PageUrls.Clients);
        }
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }

}