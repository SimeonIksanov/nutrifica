@page "/account/changePassword"
@using System.ComponentModel.DataAnnotations
@using Nutrifica.Api.Contracts.Users.Requests
@using Nutrifica.Shared.Wrappers
@using Nutrifica.Spa.Infrastructure.Services.Authentication
@using Nutrifica.Spa.Infrastructure.Services.Users
@inject NutrificaAuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@inject ISnackbar Snackbar
@implements IDisposable
@attribute [Authorize]

<MudContainer
    Gutters="true"
    MaxWidth="MaxWidth.Small">
    <EditForm
        EditContext="_editContext"
        OnValidSubmit="Submit">

        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <MudTextField
            Label="Текущий пароль"
            @bind-Value="Model.CurrentPassword"
            InputType="InputType.Password"
            Required="true"
            Variant="Variant.Outlined"
            Margin="Margin.Dense"
            RequiredError="Это поле обязательно"
            autocomplete="current-password"/>
        <ValidationMessage For="() => Model.CurrentPassword"/>

        <MudTextField
            Label="Новый пароль"
            @bind-Value="Model.NewPassword"
            InputType="InputType.Password"
            Required="true"
            Variant="Variant.Outlined"
            Margin="Margin.Dense"
            RequiredError="Это поле обязательно"
            autocomplete="new-password"/>
        <ValidationMessage For="() => Model.NewPassword"/>

        <MudTextField
            Label="Новый пароль еще раз"
            @bind-Value="Model.ConfirmPassword"
            InputType="InputType.Password"
            Required="true"
            Variant="Variant.Outlined"
            Margin="Margin.Dense"
            RequiredError="Это поле обязательно"/>
        <ValidationMessage For="() => Model.ConfirmPassword"/>

        <MudButton
            ButtonType="ButtonType.Submit"
            Variant="Variant.Filled"
            Color="Color.Primary">
            Изменить пароль
        </MudButton>
    </EditForm>

</MudContainer>

@code {
    private ChangePasswordModel Model { get; set; } = new();
    private Error? _error = null;
    private bool _showError;
    private EditContext _editContext = null!;
    private ValidationMessageStore _messageStore = null!;
    private readonly CancellationTokenSource _cts = new();

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Model);
        _messageStore = new ValidationMessageStore(_editContext);
        _editContext.OnValidationRequested += HandleOnValidationRequested;
        _editContext.OnFieldChanged += HandleOnFieldChanged;
    }

    private void HandleOnValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _showError = false;
        _messageStore.Clear();
    }

    public void Dispose()
    {
        if (_editContext is not null)
            _editContext.OnValidationRequested -= HandleOnValidationRequested;
        _cts.CancelAsync();
        _cts.Dispose();
    }

    private void HandleOnFieldChanged(object? sender, FieldChangedEventArgs eventArgs)
    {
        _messageStore.Clear(eventArgs.FieldIdentifier);
    }

    record ChangePasswordModel : UserChangePasswordDto
    {
        [Compare(nameof(NewPassword), ErrorMessage = "Пароль не совпадает.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private async Task Submit(EditContext obj)
    {
        var request = new UserChangePasswordDto
        {
            Id = AuthenticationStateProvider.CurrentUser.Id,
            CurrentPassword = Model.CurrentPassword,
            NewPassword = Model.NewPassword
        };
        var response = await UserService.ChangePasswordAsync(request, _cts.Token);
        if (response.IsSuccess)
        {
            Snackbar.Add("Пароль изменен.", Severity.Success);
            Model = new();
        }
        else
        {
            _messageStore.Add(() => Model, response.Error.Description);
            _editContext.NotifyValidationStateChanged();
            Snackbar.Add("Не удалось изменить пароль", Severity.Error);
        }
    }

}