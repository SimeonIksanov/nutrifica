@using System.ComponentModel.DataAnnotations
@using Nutrifica.Api.Contracts.Users.Requests
@using Nutrifica.Api.Contracts.Users.Responses
@using Nutrifica.Spa.Infrastructure.Services.Users
@inject IUserService UserService
@implements IDisposable

<EditForm
    EditContext="_editContext"
    OnValidSubmit="Submit">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator/>

            <MudTextField Label="Пароль"
                          @bind-Value="_model.NewPassword"
                          InputType="InputType.Password"
                          For="() => _model.NewPassword"
                          Required="true"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          RequiredError="Это поле обязательно к заполнению"/>

            <MudTextField Label="Подтверждение пароля"
                          @bind-Value="_model.ConfirmPassword"
                          InputType="InputType.Password"
                          For="() => _model.ConfirmPassword"
                          Required="true"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          RequiredError="Это поле обязательно к заполнению"/>

        </DialogContent>

        <DialogActions>
            <MudButton
                OnClick="CloseWindowAsCancel">
                Отменить
            </MudButton>

            <MudButton
                ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Primary">
                Обновить
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public UserResponse User { get; set; } = null!;
    private EditContext _editContext = null!;
    private ResetPasswordModel _model = null!;
    private ValidationMessageStore _messageStore = null!;
    private readonly CancellationTokenSource _cts = new();

    protected override void OnInitialized()
    {
        _model = new();
        _editContext = new EditContext(_model);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _messageStore.Clear();
    }

    async Task Submit()
    {
        var request = new UserResetPasswordRequest
        {
            Id = User.Id,
            NewPassword = _model.NewPassword
        };
        var result = await UserService
            .ResetPasswordAsync(request, _cts.Token);
        if (result.IsFailure)
        {
            _messageStore.Add(() => _model, result.Error.Description);
            StateHasChanged();
            return;
        }

        MudDialog.Close(DialogResult.Ok(true));
    }

    void CloseWindowAsCancel() => MudDialog.Cancel();

    public void Dispose()
    {
        _editContext.OnValidationRequested -= HandleValidationRequested;
        _cts.Cancel();
        _cts.Dispose();
    }

    record ResetPasswordModel : UserResetPasswordRequest
    {
        [Compare(nameof(NewPassword), ErrorMessage = "Пароль не совпадает.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}