@using Nutrifica.Api.Contracts.Users.Requests
@using Nutrifica.Shared.Wrappers
@using Nutrifica.Spa.Infrastructure.Services.Users
@inject IUserService UserService
@inject ISnackbar Snackbar
@implements IDisposable

<EditForm
    EditContext="_editContext"
    OnValidSubmit="Submit">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <ApiResponseAlert Visible="@showError" Error="@Error"/>
            <MudTextField
                Label="Username"
                @bind-Value="Model.Username"
                Required="true"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                RequiredError="Это поле обязательно к заполнению"/>
            <ValidationMessage For="() => Model.Username"/>

            <MudTextField
                Label="Имя"
                @bind-Value="Model.FirstName"
                Required="true"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                RequiredError="Это поле обязательно к заполнению"/>
            <ValidationMessage For="() => Model.FirstName"/>

            <MudTextField
                Label="Отчество"
                @bind-Value="Model.MiddleName"
                Required="false"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"/>
            <ValidationMessage For="() => Model.MiddleName"/>

            <MudTextField
                Label="Фамилия"
                @bind-Value="Model.LastName"
                Required="true"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                RequiredError="Это поле обязательно к заполнению"/>
            <ValidationMessage For="() => Model.LastName"/>

            <MudTextField
                Label="Email"
                @bind-Value="Model.Email"
                Required="false"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"/>
            <ValidationMessage For="() => Model.Email"/>

            <MudTextField
                Label="Телефон"
                @bind-Value="Model.PhoneNumber"
                Required="false"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"/>
            <ValidationMessage For="() => Model.PhoneNumber"/>

        </DialogContent>

        <DialogActions>
            <MudButton
                OnClick="CloseWindowAsCancel">
                Отменить
            </MudButton>

            <MudButton
                ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Primary">
                Создать
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    private ValidationMessageStore? _messageStore;
    private UserCreateDto Model { get; } = new();
    private EditContext? _editContext;
    private readonly CancellationTokenSource _cts = new();
    private Error? Error;
    private bool showError = false;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Model);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(_editContext);
    }

    async Task Submit()
    {
        showError = false;

        var createdResult = await UserService
            .CreateAsync(Model, _cts.Token);
        if (createdResult.IsFailure)
        {
            Error = createdResult.Error;
            showError = true;
            StateHasChanged();
            return;
        }

        MudDialog.Close(DialogResult.Ok(createdResult.Value));
    }

    void CloseWindowAsCancel() => MudDialog.Cancel();

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        showError = false;
        _messageStore?.Clear();
    }

    public void Dispose()
    {
        if (_editContext != null)
            _editContext.OnValidationRequested -= HandleValidationRequested;
        _cts?.CancelAsync();
        _cts?.Dispose();
    }
}