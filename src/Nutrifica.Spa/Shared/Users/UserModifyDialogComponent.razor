@using Nutrifica.Api.Contracts.Users.Requests
@using Nutrifica.Api.Contracts.Users.Responses
@using Nutrifica.Shared.Enums
@using Nutrifica.Shared.Wrappers
@using Nutrifica.Spa.Infrastructure.Services.Users
@inject IUserService UserService
@inject ISnackbar Snackbar
@implements IDisposable

<EditForm
    EditContext="_editContext"
    OnValidSubmit="Submit">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <ApiResponseAlert Visible="@_showError" Error="@_error"/>

            <MudTextField Label="Username"
                          @bind-Value="Model.Username"
                          For="() => Model.Username"
                          Required="true"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          RequiredError="Это поле обязательно к заполнению"/>

            <MudTextField Label="Имя"
                          @bind-Value="Model.FirstName"
                          For="() => Model.FirstName"
                          Required="true"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          RequiredError="Это поле обязательно к заполнению"/>

            <MudTextField Label="Отчество"
                          @bind-Value="Model.MiddleName"
                          For="() => Model.MiddleName"
                          Required="false"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"/>

            <MudTextField Label="Фамилия"
                          @bind-Value="Model.LastName"
                          For="() => Model.LastName"
                          Required="true"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          RequiredError="Это поле обязательно к заполнению"/>

            <MudTextField Label="Email"
                          @bind-Value="Model.Email"
                          For="() => Model.Email"
                          Required="false"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"/>

            <MudTextField Label="Телефон"
                          @bind-Value="Model.PhoneNumber"
                          For="() => Model.PhoneNumber"
                          Required="false"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"/>

            <MudSelect Label="Роль"
                       @bind-Value="Model.Role"
                       T="UserRole"
                       Variant="Variant.Outlined"
                       Margin="Margin.Dense">
                <MudSelectItem Value="UserRole.Operator">Оператор</MudSelectItem>
                <MudSelectItem Value="UserRole.Manager">Менеджер</MudSelectItem>
                <MudSelectItem Value="UserRole.OfficeManager">Офис менеджер</MudSelectItem>
                <MudSelectItem Value="UserRole.Director">Директор</MudSelectItem>
            </MudSelect>

            <MudSelect Label="Руководитель"
                       @bind-Value="Model.SupervisorId"
                       T="Guid?"
                       Variant="Variant.Outlined"
                       Margin="Margin.Dense"
                       Dense="true">
                <MudSelectItem Value="@(null as Guid?)" >@((MarkupString)"&nbsp;")</MudSelectItem>
                @foreach (var manager in Managers.Values.Where(x=>x.Role>Model.Role))
                {
                    <MudSelectItem Value="manager.Id" T="Guid?" >
                        @manager.FirstName @manager.LastName
                    </MudSelectItem>
                }
            </MudSelect>
            
            <MudSwitch Label="Активен"
                       @bind-Value="@ModelEnabled"
                       Color="Color.Primary"/>

            @if (Model.Enabled == false)
            {
                <MudTextField Label="Причина блокировки"
                              @bind-Value="Model.DisableReason"
                              For="() => Model.DisableReason"
                              Required="_userDisabled"
                              Disabled="@Model.Enabled"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"/>
            }

        </DialogContent>

        <DialogActions>
            <MudButton
                OnClick="CloseWindowAsCancel">
                Отменить
            </MudButton>

            <MudButton
                ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Primary">
                Обновить
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public UserDto User { get; set; } = null!;
    [Parameter] public IDictionary<Guid, UserDto> Managers { get; set; } = null!;

    private ValidationMessageStore _messageStore = null!;
    private UserUpdateDto Model { get; } = new();
    private EditContext _editContext = null!;
    private CancellationTokenSource _cts = new();
    private Error? _error;
    private bool _showError = false;
    private bool _userDisabled => Model.Enabled == false;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Model);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(_editContext);
        MapIncomingUserToFormModel();
    }

    async Task Submit()
    {
        _showError = false;

        var updatedResult = await UserService
            .UpdateAsync(Model, _cts.Token);
        if (updatedResult.IsFailure)
        {
            _error = updatedResult.Error;
            _showError = true;
            StateHasChanged();
            return;
        }

        MudDialog.Close(DialogResult.Ok(updatedResult.Value));
    }

    void CloseWindowAsCancel() => MudDialog.Cancel();

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _showError = false;
        _messageStore?.Clear();
    }

    public void Dispose()
    {
        if (_editContext != null)
            _editContext.OnValidationRequested -= HandleValidationRequested;
        _cts.CancelAsync();
        _cts.Dispose();
    }

    private void MapIncomingUserToFormModel()
    {
        if (User is null) return;
        Model.Id = User.Id;
        Model.Username = User.Username;
        Model.FirstName = User.FirstName;
        Model.MiddleName = User.MiddleName;
        Model.LastName = User.LastName;
        Model.Email = User.Email;
        Model.PhoneNumber = User.PhoneNumber;
        Model.Role = User.Role;
        Model.SupervisorId = User.SupervisorId;
        Model.Enabled = User.Enabled;
        Model.DisableReason = User.DisableReason;
    }

    private bool ModelEnabled
    {
        get { return Model.Enabled; }
        set
        {
            Model.Enabled = value;
            if (value) Model.DisableReason = string.Empty;
        }
    }
}