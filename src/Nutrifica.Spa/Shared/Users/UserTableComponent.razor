@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using System.Linq.Expressions
@using Nutrifica.Api.Contracts.Users.Responses
@using Nutrifica.Shared.Wrappers
@using Nutrifica.Spa.Infrastructure.Services.Users
@implements IDisposable

<MudContainer
    Gutters="true"
    MaxWidth="MaxWidth.False">

    <MudDataGrid
        T="UserResponse"
        Items="@_users"
        Dense="true"
        Striped="true"
        Bordered="true"
        Outlined="false"
        Elevation="0"
        ColumnResizeMode="ResizeMode.Container"
        RowStyleFunc="@_rowStyleFunc">

        <ToolBarContent>
            <MudToolBar >
                <MudButton
                    @onclick="OnAddClick"
                    Variant="Variant.Outlined"
                    Size="Size.Small">
                    Создать
                </MudButton>
            </MudToolBar>
        </ToolBarContent>

        <Columns>
            <HierarchyColumn/>
            <PropertyColumn Property="x => x.Id" Editable="false" Hidden="true"/>
            <PropertyColumn Property="x => x.FirstName"/>
            <PropertyColumn Property="x => x.LastName"/>
            <PropertyColumn Property="x => x.PhoneNumber"/>
            <PropertyColumn Property="ExtractField()" Title="Supervisor"/>
            <PropertyColumn Property="x => x.Role.ToString()"/>

            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton
                        Size="@Size.Small"
                        Icon="@Icons.Material.Outlined.Edit"
                        OnClick="() => OnEditClick(context.Item)"/>
                    <MudIconButton
                        Size="@Size.Small"
                        Icon="@Icons.Material.Outlined.Password"
                        OnClick="() => OnResetPasswordClick(context.Item)"/>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        @context.Item.LastName @context.Item.FirstName @context.Item.MiddleName
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Username: @context.Item.Username</MudText>
                    <MudText>Телефон: @context.Item.PhoneNumber</MudText>
                    <MudText>E-mail: @context.Item.Email</MudText>
                    <MudText>Роль: @context.Item.Role</MudText>
                    <MudText>Активный: @context.Item.Enabled</MudText>
                    <MudText>Причина отключения: @context.Item.DisableReason</MudText>
                    <MudText>Дата создания: @context.Item.CreatedAt.ToString("dd.MM.yyyy")</MudText>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>

    </MudDataGrid>

</MudContainer>

@code {

    // private PagedList<UserResponse>? usersPagedList;
    private ICollection<UserResponse> _users = Array.Empty<UserResponse>();
    private IDictionary<Guid, UserResponse> _managers = new Dictionary<Guid, UserResponse>();
    private CancellationTokenSource _cancellationTokenSource = new();

    public void Dispose()
    {
        _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        var result = await UserService.Get(_cancellationTokenSource.Token);
        if (result.IsFailure)
        {
            Snackbar.Add(result.Error.Description, Severity.Error);
            _users = Array.Empty<UserResponse>();
            _managers = new Dictionary<Guid, UserResponse>();
        }
        else
        {
            _users = result.Value.Items;
            _managers = _users
                .Where(x => (int)x.Role > 1)
                .ToDictionary(k => k.Id, v => v);
        }
    }

    private async Task OnAddClick()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false,
            Position = DialogPosition.TopCenter,
            CloseOnEscapeKey = true
        };
        var dialog = await DialogService.ShowAsync<UserAddDialogComponent>("Создание пользователя", options);
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        if (result.Data is UserResponse)
        {
            Snackbar.Add("Пользователь создан", Severity.Success);
            await LoadUsersAsync();
        }
    }

    private async Task OnResetPasswordClick(UserResponse user)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackdropClick = false,
            Position = DialogPosition.TopCenter,
            CloseOnEscapeKey = true
        };
        var dialogParameters = new DialogParameters<UserModifyDialogComponent>
        {
            { x => x.User, user },
        };
        var dialog = await DialogService.ShowAsync<UserResetPasswordDialogComponent>("Изменение пользователя", dialogParameters, options);
        var result = await dialog.Result;
        if (result is null || result.Canceled) return;
        Snackbar.Add("Пароль установлен.", Severity.Success);
    }

    private Expression<Func<UserResponse, string>> ExtractField()
    {
        return x => x.SupervisorId.HasValue && _managers.ContainsKey(x.SupervisorId.Value)
            ? _managers[x.SupervisorId.Value].LastName
            : string.Empty;
    }

    private async Task OnEditClick(UserResponse user)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false,
            Position = DialogPosition.TopCenter,
            CloseOnEscapeKey = true
        };
        var dialogParameters = new DialogParameters<UserModifyDialogComponent>
        {
            { x => x.User, user },
            { x => x.Managers, _managers }
        };
        var dialog = await DialogService.ShowAsync<UserModifyDialogComponent>("Изменение пользователя", dialogParameters, options);
        var result = await dialog.Result;
        if (result is null || result.Canceled) return;

        if (result.Data is UserResponse)
        {
            Snackbar.Add("Данные обновлены", Severity.Success);
            await LoadUsersAsync();
        }
    }

    private Func<UserResponse, int, string> _rowStyleFunc =>
        (user, i) => user.Enabled ? string.Empty : "font-style:italic;text-decoration: line-through";

}