@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Nutrifica.Api.Contracts.Users.Responses
@using Nutrifica.Shared.Wrappers
@using Nutrifica.Spa.Infrastructure.Services.Users
@implements IDisposable

<MudDataGrid
    Items="@usersPagedList?.Items"
    Dense="true"
    Striped="true"
    Bordered="true"
    Outlined="false"
    ColumnResizeMode="ResizeMode.Container">

    <ToolBarContent>
        <MudToolBar >
            <MudButton
                @onclick="OnAddClick"
                Variant="Variant.Outlined"
                Size="Size.Small">
                Создать
            </MudButton>
        </MudToolBar>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Username"/>
        <PropertyColumn Property="x => x.FirstName"/>
        <PropertyColumn Property="x => x.MiddleName"/>
        <PropertyColumn Property="x => x.LastName"/>
        <PropertyColumn Property="x => x.Email"/>
        <PropertyColumn Property="x => x.PhoneNumber"/>
        <PropertyColumn Property="x => x.Supervisor == null ? string.Empty : string.Join(' ', x.Supervisor.FirstName, x.Supervisor.LastName)"/>
        <PropertyColumn Property="x => x.Role.ToString()"/>
        <PropertyColumn Property="x => x.Enabled"/>
        @* <PropertyColumn Property="x=>x.DisableReason" /> *@
        @* <PropertyColumn Property="x => x.CreatedAt"/> *@
    </Columns>
</MudDataGrid>

@code {
    private PagedList<UserResponse>? usersPagedList;
    private CancellationTokenSource _cancellationTokenSource = new();

    public void Dispose()
    {
        _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        var result = await UserService.Get(_cancellationTokenSource.Token);
        if (result.IsFailure)
        {
            Snackbar.Add(result.Error.Description, Severity.Error);
        }
        else
        {
            usersPagedList = result.Value;
        }
    }

    private async Task OnAddClick()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false,
            Position = DialogPosition.TopCenter,
            CloseOnEscapeKey = true
        };
        var dialog = await DialogService.ShowAsync<UserAddDialogComponent>("Создание пользователя", options);
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        if (result.Data is UserResponse)
        {
            Snackbar.Add("Пользователь создан", Severity.Success);
            // users?.Items.Add(createdUser);
            await LoadUsersAsync();
        }
    }
}