@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using System.Linq.Expressions
@using Nutrifica.Api.Contracts.Users.Responses
@using Nutrifica.Spa.Extensions
@using Nutrifica.Spa.Infrastructure.Models
@using Nutrifica.Spa.Infrastructure.Services.Users
@implements IDisposable

<MudContainer
    Gutters="true"
    MaxWidth="MaxWidth.False">

    <MudDataGrid
        T="UserDto"
        @ref="_dataGrid"
        Dense="true"
        Striped="true"
        Bordered="true"
        Outlined="false"
        Elevation="0"
        ColumnResizeMode="ResizeMode.Column"
        RowStyleFunc="@RowStyleFunc"
        ServerData="FetchUsersAsync"
        Filterable="true"
        FilterMode="DataGridFilterMode.Simple">

        <ToolBarContent>
            <MudToolBar Class="gap-2">
                <MudButton
                    @onclick="OnAddClick"
                    Variant="Variant.Outlined"
                    Size="Size.Small">
                    Создать
                </MudButton>

                <MudButton @onclick="OnRefreshClick"
                           Variant="Variant.Outlined"
                           Size="Size.Small">
                    Обновить
                </MudButton>
            </MudToolBar>
        </ToolBarContent>

        <Columns>
            <HierarchyColumn/>
            <PropertyColumn Property="x => x.Id" Editable="false" Hidden="true" Sortable="false" Filterable="false"/>
            <PropertyColumn Property="x => x.FirstName" Title="Имя"/>
            <PropertyColumn Property="x => x.LastName" Title="Фамилия"/>
            <PropertyColumn Property="x => x.PhoneNumber" Title="Телефон"/>
            <PropertyColumn Property="ExtractField()" Title="Руководитель" Sortable="false"/>
            <PropertyColumn Property="x => x.Role" Title="Роль"/>
            <PropertyColumn Property="x => x.Enabled" Title="Активен"/>

            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton
                        Size="@Size.Small"
                        Icon="@Icons.Material.Outlined.Edit"
                        OnClick="() => OnEditClick(context.Item)"/>
                    <MudIconButton
                        Size="@Size.Small"
                        Icon="@Icons.Material.Outlined.Password"
                        OnClick="() => OnResetPasswordClick(context.Item)"/>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        @context.Item.LastName @context.Item.FirstName @context.Item.MiddleName
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Username: @context.Item.Username</MudText>
                    <MudText>Телефон: @context.Item.PhoneNumber</MudText>
                    <MudText>E-mail: @context.Item.Email</MudText>
                    <MudText>Роль: @context.Item.Role</MudText>
                    <MudText>Активный: @context.Item.Enabled</MudText>
                    <MudText>Причина отключения: @context.Item.DisableReason</MudText>
                    <MudText>Дата создания: @context.Item.CreatedAt.ToString("dd.MM.yyyy")</MudText>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>

        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>

        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>

        <PagerContent>
            <MudDataGridPager T="UserDto"/>
        </PagerContent>
    </MudDataGrid>

</MudContainer>

@code {
    // private ICollection<UserDto> _users = Array.Empty<UserDto>();
    private IDictionary<Guid, UserDto> _managers = new Dictionary<Guid, UserDto>();
    private CancellationTokenSource _cancellationTokenSource = new();
    private MudDataGrid<UserDto> _dataGrid = null!;

    public void Dispose()
    {
        _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _dataGrid.FilterDefinitions.Clear();
            _dataGrid.FilterDefinitions.Add(new FilterDefinition<UserDto>
            {
                Id = Guid.NewGuid(),
                Title = "Active",
                Column = _dataGrid.RenderedColumns.Find(x => x.PropertyName == nameof(UserDto.Enabled)),
                Operator = FilterOperator.Boolean.Is,
                Value = true
            });
        }
    }

    private async Task<GridData<UserDto>> FetchUsersAsync(GridState<UserDto> state)
    {
        var managersTask = LoadManagersAsync();
        var usersTask = LoadUsersAsync(state);
        await Task.WhenAll(managersTask, usersTask);
        return usersTask.Result;
    }

    private async Task<GridData<UserDto>> LoadUsersAsync(GridState<UserDto> state)
    {
        var queryParams = new QueryParams
        {
            Page = state.Page + 1,
            PageSize = state.PageSize
        };
        ApplyFilters(state, queryParams);
        ApplySorts(state, queryParams);

        var result = await UserService.GetAsync(queryParams, _cancellationTokenSource.Token);
        if (result.IsFailure)
        {
            Snackbar.Add(result.Error.Description, Severity.Error);
            // _users = Array.Empty<UserDto>();
            return new GridData<UserDto>();
        }

        // _users = result.Value.Items;

        return new GridData<UserDto>
        {
            Items = result.Value.Items,
            TotalItems = result.Value.TotalCount
        };
    }

    private async Task LoadManagersAsync()
    {
        var managerResult = await UserService.GetAsync(new QueryParams() { Filters = "role>0", PageSize = 100 }, _cancellationTokenSource.Token);
        if (managerResult.IsSuccess)
            _managers = managerResult.Value.Items.ToDictionary(x => x.Id, x => x);
    }

    private static void ApplySorts(GridState<UserDto> state, QueryParams queryParams)
    {
        if (state.SortDefinitions.Count > 0)
            queryParams.Sorts = state.SortDefinitions
                .Select(x => x.Descending ? $"-{x.SortBy}" : x.SortBy)
                .Aggregate("", (a, b) => string.Join(",", a, b));
    }

    private void ApplyFilters(GridState<UserDto> state, QueryParams queryParams)
    {
        if (state.FilterDefinitions.Count > 0)
        {
            string filter1 = state.FilterDefinitions
                .Where(x => x.Title != "Руководитель")
                .Select(x => x.ToSieveFilters())
                .Aggregate("", (a, b) => string.Join(",", a, b));
            string filter2 = state.FilterDefinitions
                .Where(x => x.Title == "Руководитель")
                .Select(x =>
                {
                    if (x.Operator == FilterOperator.String.Empty)
                        return $"{x.Column!.PropertyName}==";

                    if (x.Operator == FilterOperator.String.NotEmpty)
                        return $"{x.Column!.PropertyName}!=";
                    if (x.Value is null)
                        return string.Empty;

                    var supervisorIds = x.Operator! switch
                    {
                        FilterOperator.String.StartsWith => _managers
                            .Where(kv => kv.Value.FullName.StartsWith((string)x.Value, StringComparison.InvariantCultureIgnoreCase))
                            .Select(kv => kv.Key)
                            .ToArray(),
                        FilterOperator.String.EndsWith => _managers
                            .Where(kv => kv.Value.FullName.EndsWith((string)x.Value, StringComparison.InvariantCultureIgnoreCase))
                            .Select(kv => kv.Key)
                            .ToArray(),
                        FilterOperator.String.Contains => _managers
                            .Where(kv => kv.Value.FullName.Contains((string)x.Value, StringComparison.InvariantCultureIgnoreCase))
                            .Select(kv => kv.Key)
                            .ToArray(),
                        FilterOperator.String.NotContains => _managers
                            .Where(kv => !kv.Value.FullName.Contains((string)x.Value, StringComparison.InvariantCultureIgnoreCase))
                            .Select(kv => kv.Key)
                            .ToArray(),
                        FilterOperator.String.Equal => _managers
                            .Where(kv => kv.Value.FullName.Equals((string)x.Value, StringComparison.InvariantCultureIgnoreCase))
                            .Select(kv => kv.Key)
                            .ToArray(),
                        FilterOperator.String.NotEqual => _managers
                            .Where(kv => !kv.Value.FullName.Equals((string)x.Value, StringComparison.InvariantCultureIgnoreCase))
                            .Select(kv => kv.Key)
                            .ToArray(),
                        _ => Array.Empty<Guid>()
                    };
                    string joinedIds = string.Join("|", supervisorIds);
                    return $"SupervisorId=={joinedIds}";
                })
                .Aggregate("", (a, b) => string.Join(",", a, b));
            string combined = (new[] { filter1, filter2 })
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .Aggregate(string.Empty, (a, b) => string.Concat(a, ",", b));
            if (!string.IsNullOrWhiteSpace(combined))
                queryParams.Filters = combined;
        }
    }

    private async Task OnAddClick()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false,
            Position = DialogPosition.TopCenter,
            CloseOnEscapeKey = true
        };
        var dialog = await DialogService.ShowAsync<UserAddDialogComponent>("Создание пользователя", options);
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        if (result.Data is UserDto)
        {
            Snackbar.Add("Пользователь создан", Severity.Success);
            _ = _dataGrid.ReloadServerData();
        }
    }

    private async Task OnResetPasswordClick(UserDto user)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackdropClick = false,
            Position = DialogPosition.TopCenter,
            CloseOnEscapeKey = true
        };
        var dialogParameters = new DialogParameters<UserModifyDialogComponent>
        {
            { x => x.User, user },
        };
        var dialog = await DialogService.ShowAsync<UserResetPasswordDialogComponent>("Изменение пользователя", dialogParameters, options);
        var result = await dialog.Result;
        if (result is null || result.Canceled) return;
        Snackbar.Add("Пароль установлен.", Severity.Success);
    }

    private Expression<Func<UserDto, string>> ExtractField()
    {
        return x => x.SupervisorId.HasValue && _managers.ContainsKey(x.SupervisorId.Value)
            ? _managers[x.SupervisorId.Value].FullName
            : string.Empty;
    }

    private async Task OnEditClick(UserDto user)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false,
            Position = DialogPosition.TopCenter,
            CloseOnEscapeKey = true
        };
        var dialogParameters = new DialogParameters<UserModifyDialogComponent>
        {
            { x => x.User, user },
            { x => x.Managers, _managers }
        };
        var dialog = await DialogService.ShowAsync<UserModifyDialogComponent>("Изменение пользователя", dialogParameters, options);
        var result = await dialog.Result;
        if (result is null || result.Canceled) return;

        if (result.Data is UserDto)
        {
            Snackbar.Add("Данные обновлены", Severity.Success);
            _ = _dataGrid.ReloadServerData();
        }
    }

    private Func<UserDto, int, string> RowStyleFunc =>
        (user, _) => user.Enabled ? string.Empty : "font-style:italic;text-decoration: line-through";

    private async Task OnRefreshClick()
    {
        await _dataGrid.ReloadServerData();
    }

}